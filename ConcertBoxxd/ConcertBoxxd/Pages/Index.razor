@page "/"
@using ConcertBoxxd.Data;
@using ConcertBoxxd.Services;
@inject ConcertAPIService setlistfm
@inject DBService dbservice
@using System;
@using System.Text.RegularExpressions;

<input class="form-control" type="text" @bind=concertlink />
<button class="btn btn-primary" @onclick="GetConcert">Add Concert</button>
<table class="table">
    <thead>
        <tr>
            <th>Artist</th>
            <th>Date</th>
            <th>Tour</th>
            <th>Venue</th>
			<th>Location</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var concert in shows)
        {
            <tr @onclick="() => concert.IsRowExpanded = !concert.IsRowExpanded">
                <td>@concert.Artist</td>
                <td>@concert.Date</td>
                <td>@concert.Tour</td>
                <td>@concert.Venue</td>
                <td>@concert.City , @concert.State</td>
            </tr>
            if (concert.IsRowExpanded)
            {
                <tr>

                </tr>
            }
        }
    </tbody>
</table>


@code
{
    @inject NavigationManager NavigationManager;
    public string concertlink = "";
    public List<Concert> shows = new List<Concert>();
    public List<Song_> setlist = new List<Song_>();
    //public List<Song> setlist

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            int totalConcerts = await dbservice.ConcertCount();

            for (int i = 1; i <= totalConcerts; i++) 
            {
               Concert tempConcert = (await dbservice.GetConcert(i));
                List<Song_> temoSetlist = (await dbservice.GetSetlist(i));

                StateHasChanged();
            }
        }
    }

    public async Task GetConcert()
    {

        int index = await dbservice.ConcertCount()+ 1;
        string mbid = GetMbid(concertlink);
        Concert concertHolder = await setlistfm.GetConcertData(mbid, index);
        await dbservice.PostConcert(concertHolder);
        NavigationManager.NavigateTo("/", true);
        concertlink = "";

    }
    public async Task GetSetlist(string mbid, int index)
    {
    }
    public string GetMbid(string url)
    {
        //        string pattern = @"-(.*).html";
        string pattern = @"([a-z0-9]*).html";
        // Use regex to match the pattern in the URL
        Match match = Regex.Match(url, pattern);

        // Check if the match is successful
        if (match.Success)
        {
            // Extract the captured value
            string capturedValue = match.Groups[1].Value;
            // Display the captured value
            return capturedValue;
        }
        else
        {
            return "invalid url";
        }

    }

}